/*
 * 
 */

import React, { Suspense, useState, useEffect } from 'react';
import { Container, Row, Col, Button, Dropdown, Form } from "react-bootstrap";
import Swal from 'sweetalert2';
import { postJson } from "../../utility/postData";
import { getJson } from "../../utility/getData";
import UserSetting from "./UserSetting";
const UpdateEmailModal = React.lazy(() => import("./UpdateEmailModal"));

export default function SecuritySettings(props) {
  const [showUpdateEmailModal, setShowUpdateEmailModal] = useState(false);
  const [emailConfirmed, setEmailConfirmed] = useState(false);
  const [isGoogleAuthenticatorEnabled, setIsGoogleAuthenticatorEnabled] = useState(false);
  const [twoFactor, setTwoFactor] = useState(false);
  const [isEmailAuthenticatorEnabled, setIsEmailAuthenticatorEnabled] = useState(false);
  
  const requestAPIKey = () => {
    getJson('/api/v1/account/apikeys/new?roles=default')
      .then(response => {
        if (response.success) {
          Swal.fire({
            icon: "success",
            title: 'Your new key is:',
            input: 'text',
            inputValue: response.Key.Key,
            showCancelButton: false
          });
        } else {
          // Did not work
          Swal.fire("Error generating key: " + data.message, "error");
        }
      })
      .catch((error) => {
        if (error instanceof Error) {
          Swal.fire("Error", `${error.message}`, "error");
        }
        else {
          error.json().then(data => {
            Swal.fire("Error", `${data.message}`, "error");
          })
        }
      });
    return false; // Prevent jump to top of page
  }

  const handleDisableGE = () => {
    postJson('/Manage/DisableGoogleAuthenticator/').then(response => {
      if (response.success) {
        Swal.fire("Authenticator Disabled", "Google Authenticator is now disabled", "success")
          .then(() => {
            window.location = "/Manage";
          });
      } else {
        Swal.fire("Error", `${response.message}`, "error");
      }
    });
  }

  const handleEnableGE = () => {
    postJson('/Manage/ConfigureGoogleAuthenticator/').then(response => {
      if (response.success) {
        Swal.fire({
          title: "Configure Google Authenticator",
          showCancelButton: true,
          html: '<p>Scan this QR code with your authenticator</p><img src="data:image/png;base64, ' + response.QRCodeB64 + '" class="img-fluid" /><br/><label>Enter the 6 digit code generated by authenticator:</label><input type="text" id="code" class="swal2-input">',
          focusConfirm: false,
          preConfirm: () => {
            const code = Swal.getPopup().querySelector('#code').value
            if (!code) {
              Swal.showValidationMessage(`Please enter code`)
            }
            return { code: code, secretKey: response.SecretKey }
          }
        }).then((result) => {
          postJson('/Manage/EnableGoogleAuthenticator/', {
            Code: result.value.code,
            SecretKey: result.value.secretKey
          }).then(response => {
            if (response.success) {
              Swal.fire("Authenticator Enabled", "Your 2FA is now activated with Google Authenticator", "success")
                .then(() => {
                  window.location = "/Manage";
                });
            }
            else {
              Swal.fire("Error", `${response.message}`, "error");
            }
          });

        })
      } else {
        // Did not work
        Swal.fire("Error updating: " + response.message, "error");
      }
    }).catch((error) => {
      if (error instanceof Error) {
        Swal.fire("Error", `${error.message}`, "error");
      }
      else {
        error.json().then(data => {
          Swal.fire("Error", `${data.message}`, "error");
        })
      }
    });
  }

  useEffect(() => {
    async function initialize() {
      await fetch("/api/v1/user/settings/security").then(response => {
        return response.json();
      }).then(data => {
        setEmailConfirmed(data.EmailConfirmed);
        setIsGoogleAuthenticatorEnabled(data.IsGoogleAuthenticatorEnabled);
        setTwoFactor(data.TwoFactor);
        setIsEmailAuthenticatorEnabled(data.IsEmailAuthenticatorEnabled);
      });
    };
    initialize();
  }, []); // Update after shown

  return (
    <>
      <Suspense fallback={<></>}>
        <UpdateEmailModal show={showUpdateEmailModal} onClose={() => { setShowUpdateEmailModal(false); }} />
      </Suspense>

      <div className="ibox-content profile-content">
        <h4>Security</h4>
        <Container>
          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              <a className="btn btn-block btn-outline btn-sm btn-primary" href='/Manage/ManageLogins'><i className="fa fa-user"></i> Manage Logins</a>
            </Col>
            <Col>
              External Logins
            </Col>
          </Row>

          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              <a className="btn btn-block btn-outline btn-sm btn-warning" href='/Manage/APIKeys/'><i className="fa fa-key"></i> Manage Keys</a>
            </Col>
            <Col>
              API keys
            </Col>
          </Row>

          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              <Button block variant="outline-info" size="sm"
                onClick={() => requestAPIKey()}>
                <i className="fa fa-key"></i> Request Key
              </Button>
            </Col>
            <Col>
              Request a new API key.
            </Col>
          </Row>

          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              <Button block variant="outline-primary" size="sm" onClick={() => setShowUpdateEmailModal(true)}>
                <i className="fa-solid fa-at"></i> Update Email
              </Button>
            </Col>
            <Col>
              Update email address.
            </Col>
          </Row>

          {emailConfirmed ? (
            <>
              <Row className="justify-content-start py-2">
                <Col sm={4} className="px-0">
                  <UserSetting settingName={"emailTwoFactor"} isActive={isEmailAuthenticatorEnabled} />
                </Col>
                <Col>
                  Use email 2-factor authentication.
                </Col>
              </Row>
            </>) : (
            <>
                <Row className="justify-content-start py-2">
                  <Col sm={4} className="px-0">
                  <a className="btn btn-block btn-outline btn-sm btn-danger" href='/Account/SendEmailConfirmation/'><i className="fa fa-exclamation"></i> Confirm Email</a>
                </Col>
                <Col>
                  Confirm your email to secure your account.
                </Col>
              </Row>
            </>)}
            
          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              <UserSetting settingName={"twoFactor"} isActive={ twoFactor }/>
            </Col>
            <Col>
              Use 2-factor authentication.
            </Col>
          </Row>

          <Row className="justify-content-start py-2">
            <Col sm={4} className="px-0">
              {isGoogleAuthenticatorEnabled ? (
                <>
                  <Button block variant="outline-warning" size="sm" onClick={handleDisableGE}>
                    <i className="fa fa-times-circle"></i> Disable
                  </Button>
                </>) : (<>
                  <Button block variant="outline-warning" size="sm" onClick={handleEnableGE}>
                    <i className="fa fa-lock"></i> Enable
                  </Button>
                </>)}
            </Col>
            <Col>
              Google Authenticator
            </Col>
          </Row>
        </Container>
      </div>
    </>
  );
}