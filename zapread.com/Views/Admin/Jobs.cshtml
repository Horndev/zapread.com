@model zapread.com.Models.Admin.AdminJobsViewModel

@{
    ViewBag.Title = "Admin Jobs page";
}

<div class="wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <br />
        <h2>Administration</h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Admin</a></li>
            <li class="breadcrumb-item active">Jobs</li>
        </ol>
        <small>Website administration page.</small>
    </div>
    <div class="col-lg-2">
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="ibox float-e-margins">
        </div>
    </div>
</div>

<div class="wrapper wrapper-content">
    <div class="row">
        <div class="col-lg-1">
        </div>
        <div class="col-lg-10">
            <div class="ibox-content no-padding">
                <div class="sk-spinner sk-spinner-three-bounce">
                    <div class="sk-bounce1"></div>
                    <div class="sk-bounce2"></div>
                    <div class="sk-bounce3"></div>
                </div>
                <div class="wrapper p-md">
                    <h3>Recurring Jobs</h3>
                    @foreach (var j in Model.RecurringJobs)
                    {
                        @j.Id
                        <text>;</text>
                        @j.Cron
                        <text>;</text>
                        @j.Queue
                        <text>;</text>
                        if (j.NextExecution != null)
                        {
                            @j.NextExecution.Value.ToString("o");
                        }
                        else
                        {
                            <text>Next Execution undefined</text>
                        }
                        <text><br /></text>
                    }

                    <h3>Check Chat Replies Email</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("MailingService.CheckChatReplies"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnCREI" class="btn btn-primary btn-sm" onclick="setupJob('CheckChatReplies')" type="button">(Re)Install</button>

                    <button id="btnCREF" class="btn btn-primary btn-sm" onclick="runJob('CheckChatReplies')" type="button">Trigger Now</button>

                    <h3>Check Locked Accounts</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("AccountMonitorService.CheckAccountLocks"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnLAI" class="btn btn-primary btn-sm" onclick="setupJob('CheckAccountLocks')" type="button">(Re)Install</button>

                    <button id="btnLAF" class="btn btn-primary btn-sm" onclick="runJob('CheckAccountLocks')" type="button">Trigger Now</button>

                    <h3>Weekly Summary Mailer</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("MailingService.MailWeeklySummaries"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnWSI" class="btn btn-primary btn-sm" onclick="setupJob('MailWeeklySummary')" type="button">(Re)Install</button>

                    <button id="btnWSF" class="btn btn-primary btn-sm" onclick="runJob('MailWeeklySummary')" type="button">Trigger Now</button>

                    <h3>LN Transaction Monitor</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("LNTransactionMonitor.CheckLNTransactions"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnLNI" class="btn btn-primary btn-sm" onclick="setupJob('CheckLNTransactions')" type="button">(Re)Install</button>

                    <button id="btnLNF" class="btn btn-primary btn-sm" onclick="runJob('CheckLNTransactions')" type="button">Trigger Now</button>

                    <h3>Community Payout</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("PayoutsService.CommunityPayout"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnCPI" class="btn btn-primary btn-sm" onclick="setupJob('CommunityPayout')" type="button">(Re)Install</button>

                    <button id="btnCPF" class="btn btn-primary btn-sm" onclick="runJob('CommunityPayout')" type="button">Trigger Now</button>

                    <h3>Groups Payout</h3>

                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("PayoutsService.GroupsPayout"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnGPI" class="btn btn-primary btn-sm" onclick="setupJob('GroupsPayout')" type="button">(Re)Install</button>

                    <button id="btnGPF" class="btn btn-primary btn-sm" onclick="runJob('GroupsPayout')" type="button">Trigger Now</button>

                    <h3>Achievements</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("AchievementsService.CheckAchievements"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnAI" class="btn btn-primary btn-sm" onclick="setupJob('CheckAchievements')" type="button">(Re)Install</button>

                    <button id="btnAF" class="btn btn-primary btn-sm" onclick="runJob('CheckAchievements')" type="button">Trigger Now</button>

                    <h3>LN Node</h3>
                    @if (Model.RecurringJobs.Select(j => j.Id).Contains("LNNodeMonitor.UpdateHourly"))
                    {
                        <span>Installed </span>
                    }
                    else
                    {
                        <span>Not Installed</span>
                    }

                    <button id="btnAI" class="btn btn-primary btn-sm" onclick="setupJob('LNNodeMonitor.UpdateHourly')" type="button">(Re)Install</button>

                    <button id="btnAF" class="btn btn-primary btn-sm" onclick="runJob('LNNodeMonitor.UpdateHourly')" type="button">Trigger Now</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/bundles/admin/jobs/css")
}

@section Scripts {
    @Scripts.Render("~/bundles/admin/jobs")
}