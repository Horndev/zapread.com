@using Microsoft.AspNet.Identity;
@using zapread.com.Helpers;
@using zapread.com.Models;
@using zapread.com.Models.UserViews;
@model zapread.com.Models.PostCommentsViewModel

@{
    var isIgnoredUser = Model.ViewerIgnoredUser;//Model.ViewerIgnoredUsers != null ? Model.ViewerIgnoredUsers.Contains(Model.Comment.UserId.Id) : false;
}

<div class="media-body" id="comment_@Model.CommentId" style="min-height: 24px;">
    <button class="btn btn-sm btn-link @if (Model.StartVisible) {<text>pull-left</text>} comment-toggle" style="display:flex;padding-left: 4px;" onclick="toggleComment(this,0);">
        <i class="fa @if (!Model.StartVisible) {<text>fa-plus-square</text>} else {<text>fa-minus-square</text>} togglebutton" style="padding-top: 2px;"></i> <span id="cel" class="btn btn-link btn-sm" style="@if (Model.StartVisible) {<text>display:none;</text>}font-size: 10pt; border-top-width: 0px; padding-top: 0px; vertical-align: top;"> [@Model.Score] Show comment...</span>
    </button>
    <div class="comment-body" style="width:100%;@if (!Model.StartVisible) {<text>display:none;</text> } ">
        @if (Request.IsAuthenticated && !Model.IsDeleted)
        {
            <div class="pull-right social-action dropdown" @*@if (Model.IsReply) { <text> style="left:15px;" </text> }*@>
                <a id="cid_@Model.CommentId"></a><button data-toggle="dropdown" class="dropdown-toggle btn-white"></button>
                <ul class="dropdown-menu dropdown-menu-right ift-xs" style="left: auto;">
                    @if (isIgnoredUser)
                    {
                        <li>
                            <button class="btn btn-link btn-sm" onclick="alert('Not yet implemented.')" ;><i class="fa fa-eye"></i> Show Comment</button>
                        </li>
                    }
                    @if (!Model.IsDeleted)
                    {
                        <li>
                            <button class="btn btn-link btn-sm" onclick="replyComment(@Model.CommentId,@Model.PostId);"><i class="fa fa-reply"></i> Reply</button>
                        </li>
                    }
                    @if (User.Identity.Name == Model.UserName)
                    {
                        <li>
                            <button class="btn btn-link btn-sm" onclick="editComment(@Model.CommentId)"><i class="fa fa-edit"></i> Edit</button>
                        </li>
                        <li>
                            <button class="btn btn-link btn-sm" onclick="deleteComment(@Model.CommentId)"><i class="fa fa-times"></i> Delete</button>
                        </li>
                    }
                    else if (!Model.IsDeleted)
                    {
                        <form>
                            <li>
                                <button class="btn btn-link btn-sm" type="submit"><i class="fa fa-flag"></i> Report Spam</button>
                            </li>
                        </form>
                    }
                </ul>
            </div>
        }
        <div class="@if (Model.IsReply) { <text>social-footer-reply</text> } else { <text>social-footer</text> }">
            <div class=@if (Model.IsReply) { <text>" "</text> } else { <text>"social-comment"</text> }>
                <div style="margin-left: 22px;margin-bottom:5px;">
                    @if (Request.IsAuthenticated && !Model.IsDeleted)
                    {
                        <div class="vote-actions" @if (isIgnoredUser) { <text> style="position: relative; display: none;" </text>  } else { <text> style="position: relative;" </text> }>
                            <a href="#/" onclick="vote(@Model.CommentId, 1, 2, 100, this)" class="@(Model.ViewerUpvoted ? "" : "text-muted")" id="uVotec_@Model.CommentId">
                                <i class="fa-solid fa-chevron-up fa-lg"> </i>
                            </a>
                            <div id="sVotec_@Model.CommentId">@Model.Score</div>
                            <a href="#/" style="position: relative;z-index: 1;" onclick="vote(@Model.CommentId, 0, 2, 100, this)" class="@(Model.ViewerDownvoted ? "" : "text-muted")" id="dVotec_@Model.CommentId">
                                <i class="fa-solid fa-chevron-down fa-lg"> </i>
                            </a>
                        </div>
                    }
                    else if (Model.IsDeleted)
                    {
                        @*Don't show score of deleted comments*@
                    }
                    else
                    {
                        <div class="vote-actions" style="position: relative;">
                            <a href="#/" onclick="vote(@Model.CommentId, 1, 2, 100, this)" class="text-muted" id="uVotec_@Model.CommentId">
                                <i class="fa-solid fa-chevron-up fa-lg"> </i>
                            </a>
                            <div id="sVotec_@Model.CommentId">@Model.Score</div>
                            <a href="#/" style="position: relative;z-index: 1;" onclick="vote(@Model.CommentId, 0, 2, 100, this)" class="text-muted" id="dVotec_@Model.CommentId">
                                <i class="fa-solid fa-chevron-down fa-lg"> </i>
                            </a>
                        </div>
                    }

                    @if (!isIgnoredUser && !Model.IsDeleted)
                    {
                        <a href="@Url.Action(actionName: "Index", controllerName: "User", routeValues: new { username = Model.UserName.Trim() })">
                            <img class="img-circle@((User != null && Model.UserAppId == User.Identity.GetUserId()) ? " user-image-30":"")" loading="lazy" width="30" height="30" src="@Url.Action("UserImage", "Home", new { size = 30, UserId = Model.UserAppId, v = Model.ProfileImageVersion })" style="margin-bottom: 16px;margin-top: 8px;" />
                        </a>
                    }
                    @if (Model.IsDeleted)
                    {
                        <text>deleted </text>
                    }
                    else
                    {
                        @Html.Partial("_PartialUserLinkVm", new UserLinkViewModel() { UserId = Model.UserId, UserAppId = Model.UserAppId, UserName = Model.UserName, IsIgnored = isIgnoredUser })
                    }
                    <small style="display: inline-block;">
                        -@if (Model.IsReply)
                        {<text> replied to <a class="userhint" data-userappid="@Model.ParentUserAppId" data-userid="@Model.ParentUserId" href="@Url.Action(actionName: "Index", controllerName: "User", routeValues: new { username = Model.ParentUserName.Trim() })">@@@Model.ParentUserName</a> &nbsp; </text> }
                    else
                    { <text> commented&nbsp; </text>}
                    </small><small class="postTime text-muted">@Model.TimeStamp.Value.ToString("o")</small>
                    @if (Model.TimeStampEdited != null)
                    {
                        <span class="text-muted" style="display:inline"> edited </span>
                        <small class="postTime text-muted" style="display: none">@Model.TimeStampEdited.Value.ToString("o")</small>
                    }
                </div>
                <div class="media-body" style="display:inline;">
                    
                    <div style="padding-left: 4px;">
                        <div class="ql-comment post-comment comment-quotable" id="commentText_@Model.CommentId" data-postid="@Model.PostId" data-commentid="@Model.CommentId">
                            @if (isIgnoredUser)
                            {
                                <span><br /></span>
                            }
                            else
                            {
                                if (Model.IsDeleted)
                                {
                                    @*<span><br /></span>*@@*<div>deleted</div><br />*@
                                }
                                else
                                {
                                    <div style="padding-left: 18px;">@Html.Raw(Model.Text)</div>
                                }
                            }
                        </div>
                    </div>
                </div>
                @if (Request.IsAuthenticated && !Model.IsDeleted) // Show the response div
                {
                    <div style="position: relative;left: 12px;top: -20px;height: 6px;">
                        <a href="javascript:void(0);" onclick="replyComment(@Model.CommentId,@Model.PostId);" class="btn-link btn btn-sm"><i class="fa fa-reply"></i></a>
                    </div>
                }

                <div id="reply_c@(Model.CommentId)" style="display: none;"></div>@*This is the element where the comment box will render*@
                <div id=@("rcomments_" + @Model.CommentId.ToString())>
                    @{
                        var subcomments = Model.CommentVms.Where(c => c.IsReply).Where(c => c.ParentCommentId == Model.CommentId);
                        foreach (var cmt in subcomments.OrderByDescending(cmt => cmt.Score))
                        {
                            var vm = new PostCommentsViewModel
                            {
                                NestLevel = Model.NestLevel + 1,
                                ParentCommentId = cmt.ParentCommentId,
                                ParentUserName = cmt.ParentUserName,
                                ParentUserId = cmt.ParentUserId,
                                StartVisible = Model.NestLevel < 4,
                                ViewerIgnoredUser = cmt.ViewerIgnoredUser,
                                CommentId = cmt.CommentId,
                                CommentVms = Model.CommentVms == null ? new List<PostCommentsViewModel>() : Model.CommentVms.ToList(),
                                TimeStamp = cmt.TimeStamp,
                                TimeStampEdited = cmt.TimeStampEdited,
                                UserId = cmt.UserId,
                                IsDeleted = cmt.IsDeleted,
                                IsReply = cmt.IsReply,
                                ProfileImageVersion = cmt.ProfileImageVersion,
                                Score = cmt.Score,
                                Text = cmt.Text,
                                UserName = cmt.UserName,
                                UserAppId = cmt.UserAppId,
                                ViewerUpvoted = cmt.ViewerUpvoted,
                                ViewerDownvoted = cmt.ViewerDownvoted,
                                PostId = cmt.PostId,
                            };
                            @Html.Partial(partialViewName: "_PartialCommentRenderVm", model: vm)
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
